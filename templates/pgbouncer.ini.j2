[pgbouncer]

;;;
;;; Generic settings
;;;

{% if pgbouncer_logfile %}logfile = /var/log/postgresql/pgbouncer.log{% endif %}
{% if pgbouncer_pidfile %}pidfile = {{ pgbouncer_pidfile }}{% endif %}

; ip address or * which means all ip-s
listen_addr = {{ pgbouncer_listen_addr }}
listen_port = {{ pgbouncer_listen_port }}

unix_socket_dir = {{ pgbouncer_unix_socket_dir }}
{% if pgbouncer_unix_socket_mode %}unix_socket_mode = {{ pgbouncer_unix_socket_mode }}{% endif %}
{% if pgbouncer_unix_socket_group %}unix_socket_group = {{ pgbouncer_unix_socket_group }}{% endif %}

; any, trust, plain, crypt, md5
auth_type = {{ pgbouncer_auth_type }}
auth_file = {{ pgbouncer_auth_file }}
{% if pgbouncer_auth_hba_file %}auth_hba_file = {{ pgbouncer_auth_hba_file }}{% endif %}

; When server connection is released back to pool:
;   session      - after client disconnects
;   transaction  - after transaction finishes
;   statement    - after statement finishes
pool_mode = {{ pgbouncer_pool_mode }}

; total number of clients that can connect
max_client_conn = {{ pgbouncer_max_client_conn }}

; default pool size.  20 is good number when transaction pooling
; is in use, in session pooling it needs to be the number of
; max clients you want to handle at any moment
default_pool_size = {{ pgbouncer_default_pool_size }}

min_pool_size = {{ pgbouncer_min_pool_size }}

; how many additional connection to allow in case of trouble
reserve_pool_size = {{ pgbouncer_reserve_pool_size }}

; if a clients needs to wait more than this many seconds, use reserve pool
reserve_pool_timeout = {{ pgbouncer_reserve_pool_timeout }}

; If off, then server connections are reused in LIFO manner
server_round_robin = {{ pgbouncer_server_round_robin }}

;;;
;;; Log settings
;;;

syslog = {{ pgbouncer_syslog }}
syslog_ident = {{ pgbouncer_syslog_ident }}
syslog_facility = {{ pgbouncer_syslog_facility }}
log_connections = {{ pgbouncer_log_connections }}
log_disconnections = {{ pgbouncer_log_disconnections }}
log_pooler_errors = {{ pgbouncer_log_pooler_errors }}
stats_period = {{ pgbouncer_stats_period }}
verbose = {{ pgbouncer_verbose }}

;;;
;;; Console access control
;;;

{% if pgbouncer_admin_users %}admin_users = {{ pgbouncer_admin_users }}{% endif %}
{% if pgbouncer_stats_users %}stats_users = {{ pgbouncer_stats_users }}{% endif %}

;;;
;;; Connection sanity checks, timeouts
;;;

; Query for cleaning connection immediately after releasing from client.
; No need to put ROLLBACK here, pgbouncer does not reuse connections
; where transaction is left open.
;
; Query for 8.3+:
;   DISCARD ALL;
;
; Older versions:
;   RESET ALL; SET SESSION AUTHORIZATION DEFAULT
;
; Empty if transaction pooling is in use.
server_reset_query = {{ pgbouncer_server_reset_query }}

;; Close server connection if its been connected longer.
server_lifetime = {{ pgbouncer_server_lifetime }}

;; Close server connection if its not been used in this time.
;; Allows to clean unnecessary connections from pool after peak.
server_idle_timeout = {{ pgbouncer_server_idle_timeout }}

;; Cancel connection attempt if server does not answer takes longer.
server_connect_timeout = {{ pgbouncer_server_connect_timeout }}

;; If server login failed (server_connect_timeout or auth failure)
;; then wait this many second.
server_login_retry = {{ pgbouncer_server_login_retry }}

;; Disconnect clients who have not managed to log in after connecting
;; in this many seconds.
client_login_timeout = {{ pgbouncer_client_login_timeout }}

;;;
;;; Dangerous timeouts
;;;

;; Dangerous.  Server connection is closed if query does not return
;; in this time.  Should be used to survive network problems,
;; _not_ as statement_timeout. (default: 0)
;query_timeout = 0

;; Dangerous.  Client connection is closed if the query is not assigned
;; to a server in this time.  Should be used to limit the number of queued
;; queries in case of a database or network failure. (default: 0)
;query_wait_timeout = 0

;; Dangerous.  Client connection is closed if no activity in this time.
;; Should be used to survive network problems. (default: 0)
;client_idle_timeout = 0

;; Clean automatically created database entries (via "*") if they
;; stay unused in this many seconds.
; autodb_idle_timeout = 3600

;;;
;;; Databases
;;;

[databases]
{% for database in pgbouncer_databases %}
{{ database.dbname }} = {% for option, value in database.options.items() %}
{{ option }}={{ value }}

{%- if not loop.last %} {% endif %}
{% endfor %}
{% endfor %}
